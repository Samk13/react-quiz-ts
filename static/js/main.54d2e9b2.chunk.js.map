{"version":3,"sources":["API.ts","Utils.ts","components/NavBar.tsx","components/QuestionCard.tsx","Types/index.ts","App.tsx","index.tsx"],"names":["fetchQuizQuestions","amount","difficulty","a","endPoint","fetch","json","data","results","map","questions","answers","array","incorrect_answers","correct_answer","sort","Math","random","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","NavBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Difficulty","QuestionCard","question","callback","userAnswer","questionNr","totalQuestions","answer","key","Button","fullWidth","disabled","value","onClick","App","useState","loading","setLoading","setQuestions","questionNumber","setQuestionNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","fetchApi","EASY","newQuestions","darkMode","setDarkMode","createMuiTheme","palette","type","ThemeProvider","Paper","style","height","Box","display","m","p","bgcolor","FormGroup","FormControlLabel","control","Switch","checked","onChange","event","target","label","justifyContent","flexDirection","length","e","currentTarget","isAnswerCorrect","previousScore","AnswerArray","correct","correctAnswer","previousAnswers","undefined","TOTAL_QUESTIONS","size","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54d2e9b2.chunk.js","sourcesContent":["import { ApiQuestions, Difficulty } from \"./Types\";\nimport { shuffleArray } from \"./Utils\";\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endPoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endPoint)).json();\n  return data.results.map((questions: ApiQuestions) => {\n    return {\n      ...questions,\n      answers: shuffleArray([\n        ...questions.incorrect_answers,\n        questions.correct_answer,\n      ]),\n    };\n  });\n};\n","export const shuffleArray = (array: any[]) => {\n    return [...array].sort(()=> Math.random() - 0.5);\n}\n","// import { FormControlLabel, FormGroup, Switch } from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  // const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n  //   setAuth(event.target.checked);\n  // };\n\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n          React / Typescript / MaterialUI / App\n          </Typography>\n          {/* <FormGroup>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={darkMode}\n                  onChange={handleChange}\n                  aria-label=\"login switch\"\n                />\n              }\n              label={darkMode ? \"Dark\" : \"Light\"}\n            />\n          </FormGroup> */}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import { Button, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport { Props } from '../Types';\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n}) => (\n<div>\n    <p>\n        question : { questionNr} / { totalQuestions}\n    </p>\n    {/* <p dangerouslySetInnerHTML={{ __html: question }}/> */}\n    <Typography variant=\"h3\">\n        {question}\n    </Typography>\n    <div>\n        {answers.map(answer => (\n            <div key={answer}>\n                <Button fullWidth disabled={!!userAnswer} value={answer} onClick={callback}>\n                    <Typography variant=\"h4\">\n                        {answer}\n                    </Typography>\n                </Button>\n            </div>\n        ))}\n    </div>\n</div>\n);\n\nexport default QuestionCard;\n","export type AnswerArray = {\n    question: string;\n    answer: string;\n    correct: boolean;\n    correctAnswer: string;\n  };\n\n  export enum Difficulty {\n    EASY = 'easy',\n    MEDIUM = 'medium',\n    HARD = 'hard'\n}\n\n// export type Props = React.InputHTMLAttributes<HTMLInputElement> & {\n//     handleChange: (event: string) => string;\n//   };\n\nexport type Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerArray | undefined;\n    questionNr: number;\n    totalQuestions: number;\n  };\n\n  export type ApiQuestions = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = ApiQuestions & {\n    answers: string[]\n}","import {\n  Box, Button, FormControlLabel,\n\n  FormGroup,\n\n\n  Paper, Switch, Typography\n} from \"@material-ui/core\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport React, { Fragment, useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\nimport NavBar from \"./components/NavBar\";\nimport QuestionCard from \"./components/QuestionCard\";\nimport { AnswerArray, Difficulty, QuestionState } from \"./Types\";\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App: React.FC = () => {\n  // State\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerArray[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  // End State\n\n  // fetch API data\n  const fetchApi = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setQuestionNumber(0);\n    setLoading(false);\n  };\n  // end fetch API data\n\n  // Check answers\n  const checkAnswers = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // user answer\n      const answer = e.currentTarget.value;\n      // validate answer\n      const isAnswerCorrect =\n        questions[questionNumber].correct_answer === answer;\n      // add to score if correct\n      if (isAnswerCorrect) {\n        setScore((previousScore) => previousScore + 1);\n      }\n      // store answers\n      const AnswerArray = {\n        question: questions[questionNumber].question,\n        answer,\n        correct: isAnswerCorrect,\n        correctAnswer: questions[questionNumber].correct_answer,\n      };\n      setUserAnswers((previousAnswers) => [...previousAnswers, AnswerArray]);\n    }\n  };\n  // End Check answers\n\n  // Next Question\n  const nextQuestion = () => {\n    const nextQuestion = questionNumber + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setQuestionNumber(nextQuestion);\n    }\n  };\n  // End Next Question\n\n  // Material UI ==================\n  const [darkMode, setDarkMode] = useState(true);\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setDarkMode(event.target.checked);\n  };\n  const theme = createMuiTheme({\n    palette: {\n      type: darkMode ? \"dark\" : \"light\",\n    },\n  });\n  // End Material UI ============\n\n  return (\n    <Fragment>\n      <ThemeProvider theme={theme}>\n        <NavBar />\n        <Paper style={{ height: \"100vh\" }}>\n          <Box display=\"flex\" m={5} p={1} bgcolor=\"background.paper\">\n            <FormGroup>\n              <FormControlLabel\n                control={\n                  <Switch\n                    checked={darkMode}\n                    onChange={handleChange}\n                    aria-label=\"login switch\"\n                  />\n                }\n                label={darkMode ? \"Dark\" : \"Light\"}\n              />\n            </FormGroup>\n          </Box>\n\n          <Box\n            display=\"flex\"\n            justifyContent=\"center\"\n            flexDirection=\"column\"\n            m={1}\n            p={10}\n            bgcolor=\"background.paper\"\n          >\n            {!gameOver && <Paper>\n                <Typography variant=\"h2\">\n                  Score: {score}\n                </Typography>\n              </Paper>}\n            {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n              <Button fullWidth onClick={fetchApi}>\n                <Typography variant=\"h2\">\n                  Start\n                </Typography>\n              </Button>\n            ) : null}\n            {loading && <p>Loading questions ...</p>}\n            {!loading && !gameOver && questions.length > 0 && (\n              <QuestionCard\n                question={questions[questionNumber].question}\n                answers={questions[questionNumber].answers}\n                callback={checkAnswers}\n                userAnswer={\n                  userAnswers ? userAnswers[questionNumber] : undefined\n                }\n                questionNr={questionNumber + 1}\n                totalQuestions={TOTAL_QUESTIONS}\n              />\n            )}\n            {!gameOver &&\n              !loading &&\n              userAnswers.length === questionNumber + 1 &&\n              questionNumber !== TOTAL_QUESTIONS - 1 && (\n                <Button\n                  fullWidth\n                  size=\"large\"\n                  color=\"primary\"\n                  onClick={nextQuestion}\n                >\n                  <Typography variant=\"h3\">\n                    Next question\n                  </Typography>\n                </Button>\n              )}\n          </Box>\n        </Paper>\n      </ThemeProvider>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import \"fontsource-roboto\"; // Defaults to weight 400 with all styles included.\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}