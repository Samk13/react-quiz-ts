{"version":3,"sources":["API.ts","Utils.ts","components/NavBar.tsx","components/QuestionCard.tsx","Types/index.ts","App.tsx","index.tsx"],"names":["fetchQuizQuestions","amount","difficulty","a","endPoint","fetch","json","data","results","map","questions","answers","array","incorrect_answers","correct_answer","sort","Math","random","useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","NavBar","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Difficulty","QuestionCard","question","callback","userAnswer","questionNr","totalQuestions","answer","key","Button","fullWidth","disabled","value","onClick","App","useState","loading","setLoading","setQuestions","questionNumber","setQuestionNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","fetchApi","EASY","newQuestions","darkMode","setDarkMode","createMuiTheme","palette","type","ThemeProvider","Paper","style","height","Box","display","m","p","bgcolor","FormGroup","FormControlLabel","control","Switch","checked","onChange","event","target","label","justifyContent","flexDirection","length","e","currentTarget","isAnswerCorrect","previousScore","AnswerArray","correct","correctAnswer","previousAnswers","undefined","TOTAL_QUESTIONS","size","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59b87031.chunk.js","sourcesContent":["import { ApiQuestions, Difficulty } from \"./Types\";\r\nimport { shuffleArray } from \"./Utils\";\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endPoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endPoint)).json();\r\n  return data.results.map((questions: ApiQuestions) => {\r\n    return {\r\n      ...questions,\r\n      answers: shuffleArray([\r\n        ...questions.incorrect_answers,\r\n        questions.correct_answer,\r\n      ]),\r\n    };\r\n  });\r\n};\r\n","export const shuffleArray = (array: any[]) => {\r\n    return [...array].sort(()=> Math.random() - 0.5);\r\n}\r\n","// import { FormControlLabel, FormGroup, Switch } from \"@material-ui/core\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  })\r\n);\r\n\r\nexport default function NavBar() {\r\n  const classes = useStyles();\r\n\r\n  // const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n  //   setAuth(event.target.checked);\r\n  // };\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n          React / Typescript / MaterialUI / App\r\n          </Typography>\r\n          {/* <FormGroup>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={darkMode}\r\n                  onChange={handleChange}\r\n                  aria-label=\"login switch\"\r\n                />\r\n              }\r\n              label={darkMode ? \"Dark\" : \"Light\"}\r\n            />\r\n          </FormGroup> */}\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import { Button, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { Props } from '../Types';\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => (\r\n<div>\r\n    <p>\r\n        question : { questionNr} / { totalQuestions}\r\n    </p>\r\n    {/* <p dangerouslySetInnerHTML={{ __html: question }}/> */}\r\n    <Typography variant=\"h3\">\r\n        {question}\r\n    </Typography>\r\n    <div>\r\n        {answers.map(answer => (\r\n            <div key={answer}>\r\n                <Button fullWidth disabled={!!userAnswer} value={answer} onClick={callback}>\r\n                    <Typography variant=\"h4\">\r\n                        {answer}\r\n                    </Typography>\r\n                </Button>\r\n            </div>\r\n        ))}\r\n    </div>\r\n</div>\r\n);\r\n\r\nexport default QuestionCard;\r\n","export type AnswerArray = {\r\n    question: string;\r\n    answer: string;\r\n    correct: boolean;\r\n    correctAnswer: string;\r\n  };\r\n\r\n  export enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard'\r\n}\r\n\r\n// export type Props = React.InputHTMLAttributes<HTMLInputElement> & {\r\n//     handleChange: (event: string) => string;\r\n//   };\r\n\r\nexport type Props = {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerArray | undefined;\r\n    questionNr: number;\r\n    totalQuestions: number;\r\n  };\r\n\r\n  export type ApiQuestions = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = ApiQuestions & {\r\n    answers: string[]\r\n}","import {\r\n  Box, Button, FormControlLabel,\r\n\r\n  FormGroup,\r\n\r\n\r\n  Paper, Switch, Typography\r\n} from \"@material-ui/core\";\r\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { fetchQuizQuestions } from \"./API\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport QuestionCard from \"./components/QuestionCard\";\r\nimport { AnswerArray, Difficulty, QuestionState } from \"./Types\";\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nconst App: React.FC = () => {\r\n  // State\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\r\n  const [questionNumber, setQuestionNumber] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState<AnswerArray[]>([]);\r\n  const [score, setScore] = useState(0);\r\n  const [gameOver, setGameOver] = useState(true);\r\n  // End State\r\n\r\n  // fetch API data\r\n  const fetchApi = async () => {\r\n    setLoading(true);\r\n    setGameOver(false);\r\n    const newQuestions = await fetchQuizQuestions(\r\n      TOTAL_QUESTIONS,\r\n      Difficulty.EASY\r\n    );\r\n    setQuestions(newQuestions);\r\n    setScore(0);\r\n    setUserAnswers([]);\r\n    setQuestionNumber(0);\r\n    setLoading(false);\r\n  };\r\n  // end fetch API data\r\n\r\n  // Check answers\r\n  const checkAnswers = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!gameOver) {\r\n      // user answer\r\n      const answer = e.currentTarget.value;\r\n      // validate answer\r\n      const isAnswerCorrect =\r\n        questions[questionNumber].correct_answer === answer;\r\n      // add to score if correct\r\n      if (isAnswerCorrect) {\r\n        setScore((previousScore) => previousScore + 1);\r\n      }\r\n      // store answers\r\n      const AnswerArray = {\r\n        question: questions[questionNumber].question,\r\n        answer,\r\n        correct: isAnswerCorrect,\r\n        correctAnswer: questions[questionNumber].correct_answer,\r\n      };\r\n      setUserAnswers((previousAnswers) => [...previousAnswers, AnswerArray]);\r\n    }\r\n  };\r\n  // End Check answers\r\n\r\n  // Next Question\r\n  const nextQuestion = () => {\r\n    const nextQuestion = questionNumber + 1;\r\n    if (nextQuestion === TOTAL_QUESTIONS) {\r\n      setGameOver(true);\r\n    } else {\r\n      setQuestionNumber(nextQuestion);\r\n    }\r\n  };\r\n  // End Next Question\r\n\r\n  // Material UI ==================\r\n  const [darkMode, setDarkMode] = useState(true);\r\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setDarkMode(event.target.checked);\r\n  };\r\n  const theme = createMuiTheme({\r\n    palette: {\r\n      type: darkMode ? \"dark\" : \"light\",\r\n    },\r\n  });\r\n  // End Material UI ============\r\n\r\n  return (\r\n    <Fragment>\r\n      <ThemeProvider theme={theme}>\r\n        <NavBar />\r\n        <Paper style={{ height: \"100vh\" }}>\r\n          <Box display=\"flex\" m={5} p={1} bgcolor=\"background.paper\">\r\n            <FormGroup>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={darkMode}\r\n                    onChange={handleChange}\r\n                    aria-label=\"login switch\"\r\n                  />\r\n                }\r\n                label={darkMode ? \"Dark\" : \"Light\"}\r\n              />\r\n            </FormGroup>\r\n          </Box>\r\n\r\n          <Box\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            flexDirection=\"column\"\r\n            m={1}\r\n            p={10}\r\n            bgcolor=\"background.paper\"\r\n          >\r\n            {!gameOver && <Paper>\r\n                <Typography variant=\"h2\">\r\n                  Score: {score}\r\n                </Typography>\r\n              </Paper>}\r\n            {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n              <Button fullWidth onClick={fetchApi}>\r\n                <Typography variant=\"h2\">\r\n                  Start\r\n                </Typography>\r\n              </Button>\r\n            ) : null}\r\n            {loading && <p>Loading questions ...</p>}\r\n            {!loading && !gameOver && questions.length > 0 && (\r\n              <QuestionCard\r\n                question={questions[questionNumber].question}\r\n                answers={questions[questionNumber].answers}\r\n                callback={checkAnswers}\r\n                userAnswer={\r\n                  userAnswers ? userAnswers[questionNumber] : undefined\r\n                }\r\n                questionNr={questionNumber + 1}\r\n                totalQuestions={TOTAL_QUESTIONS}\r\n              />\r\n            )}\r\n            {!gameOver &&\r\n              !loading &&\r\n              userAnswers.length === questionNumber + 1 &&\r\n              questionNumber !== TOTAL_QUESTIONS - 1 && (\r\n                <Button\r\n                  fullWidth\r\n                  size=\"large\"\r\n                  color=\"primary\"\r\n                  onClick={nextQuestion}\r\n                >\r\n                  <Typography variant=\"h3\">\r\n                    Next question\r\n                  </Typography>\r\n                </Button>\r\n              )}\r\n          </Box>\r\n        </Paper>\r\n      </ThemeProvider>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import \"fontsource-roboto\"; // Defaults to weight 400 with all styles included.\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}